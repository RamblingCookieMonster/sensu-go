// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import types "github.com/sensu/sensu-go/types"

// EventController is an autogenerated mock type for the EventController type
type EventController struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, event
func (_m *EventController) Create(ctx context.Context, event types.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrReplace provides a mock function with given fields: ctx, event
func (_m *EventController) CreateOrReplace(ctx context.Context, event types.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: ctx, entity, check
func (_m *EventController) Destroy(ctx context.Context, entity string, check string) error {
	ret := _m.Called(ctx, entity, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entity, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, entity, check
func (_m *EventController) Find(ctx context.Context, entity string, check string) (*types.Event, error) {
	ret := _m.Called(ctx, entity, check)

	var r0 *types.Event
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Event); ok {
		r0 = rf(ctx, entity, check)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entity, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, entityID, checkName
func (_m *EventController) Query(ctx context.Context, entityID string, checkName string) ([]*types.Event, error) {
	ret := _m.Called(ctx, entityID, checkName)

	var r0 []*types.Event
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*types.Event); ok {
		r0 = rf(ctx, entityID, checkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityID, checkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, event
func (_m *EventController) Update(ctx context.Context, event types.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
